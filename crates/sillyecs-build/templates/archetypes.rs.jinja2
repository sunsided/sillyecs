/// The ID of an entity.
#[derive(Debug, Copy, Clone, Ord, PartialOrd, Eq, PartialEq)]
pub struct EntityId(core::num::NonZeroU64);

#[allow(dead_code)]
impl EntityId {
    /// Returns a new, unique entity ID.
    ///
    /// Uniqueness is guaranteed by using a monotonically increasing `AtomicU64` counter
    /// for generating IDs, starting from 1.
    ///
    /// # Implementation
    /// This function uses a thread-safe counter with sequential consistency ordering
    /// to ensure unique IDs even under concurrent access.
    pub fn new() -> Self {
        static ENTITY_IDS: core::sync::atomic::AtomicU64 = core::sync::atomic::AtomicU64::new(1);
        let id = ENTITY_IDS.fetch_add(1, core::sync::atomic::Ordering::SeqCst);
        EntityId(core::num::NonZeroU64::new(id).expect("ID was zero"))
    }

    /// Returns this ID as a [`NonZeroU64`](core::num::NonZeroU64) value.
    pub const fn as_nonzero_u64(&self) -> core::num::NonZeroU64 {
        self.0
    }

    /// Returns this ID as a `u64` value.
    pub const fn as_u64(&self) -> u64 {
        self.0.get()
    }
}

impl core::hash::Hash for EntityId {
    fn hash<H: core::hash::Hasher>(&self, state: &mut H) {
        self.0.hash(state);
    }
}

impl From<EntityId> for core::num::NonZeroU64 {
    fn from(value: EntityId) -> core::num::NonZeroU64 {
        value.as_nonzero_u64()
    }
}

impl From<EntityId> for u64 {
    fn from(value: EntityId) -> u64 {
        value.as_u64()
    }
}

impl core::fmt::Display for EntityId {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> Result<(), core::fmt::Error> {
        core::fmt::Display::fmt(&self.0.get(), f)
    }
}

/// The ID of an [`Archetype`].
#[derive(Debug, Copy, Clone, Ord, PartialOrd, Eq, PartialEq)]
#[repr(u32)]
pub enum ArchetypeId {
    {%- for archetype in ecs.archetypes %}
    {%- if archetype.description %}
    /// {{ archetype.description }}
    ///
    /// For details, see the [`{{ archetype.name.type }}`]({{ archetype.name.type }}) Struct.
    {%- else %}
    /// The [`{{ archetype.name.raw }}`]({{ archetype.name.type }}) archetype.
    {%- endif %}
    {{ archetype.name.raw }} = {{ archetype.id }},
    {%- endfor %}
}

impl ArchetypeId {
    {%- for archetype in ecs.archetypes %}
    /// A [`NonZeroU64`](core::num::NonZeroU64) representation of [`ArchetypeId::{{ archetype.name.raw }}`](ArchetypeId::{{ archetype.name.raw }}) archetype.
    pub const {{ archetype.name.field | upper }}_ID_VALUE: core::num::NonZeroU64 = core::num::NonZeroU64::new({{ archetype.id }}).expect("Error at ECS construction time");
    {%- endfor %}
}

#[allow(dead_code)]
impl ArchetypeId {
    /// Returns this ID as a [`NonZeroU64`](core::num::NonZeroU64) value.
    pub const fn as_nonzero_u64(&self) -> core::num::NonZeroU64 {
        match self {
            {%- for archetype in ecs.archetypes %}
            Self::{{ archetype.name.raw }} => Self::{{ archetype.name.field | upper }}_ID_VALUE,
            {%- endfor %}
        }
    }

    /// Returns this ID as a `u64` value.
    pub const fn as_u64(&self) -> u64 {
        self.as_nonzero_u64().get()
    }
}

impl core::hash::Hash for ArchetypeId {
    fn hash<H: core::hash::Hasher>(&self, state: &mut H) {
        self.as_u64().hash(state);
    }
}

impl From<ArchetypeId> for core::num::NonZeroU64 {
    fn from(value: ArchetypeId) -> core::num::NonZeroU64 {
        value.as_nonzero_u64()
    }
}

impl From<ArchetypeId> for u64 {
    fn from(value: ArchetypeId) -> u64 {
        value.as_u64()
    }
}

impl core::fmt::Display for ArchetypeId {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> Result<(), core::fmt::Error> {
        match self {
            {%- for archetype in ecs.archetypes %}
            Self::{{ archetype.name.raw }} => write!(f, "{{ archetype.name.raw }} (ID {{ archetype.id }})"),
            {%- endfor %}
        }
    }
}

/// A locator for an entity across archetypes.
#[derive(Debug, Clone, Eq, PartialEq, Ord, PartialOrd, Hash)]
pub struct EntityArchetypeRef {
    /// The ID of the archetype the entity is in.
    pub archetype: ArchetypeId,

    /// The Entity's index within that archetype.
    pub index: usize
}

/// Spawns an entity into the world.
#[allow(dead_code)]
pub trait Spawn<E> {
    /// Spawn a new entity into the world.
    fn spawn(&mut self, data: E) -> EntityId;
}

/// Marker trait for archetypes.
#[allow(dead_code)]
pub trait Archetype: 'static + Send + Sync {
    /// The ID of this archetype.
    const ID: ArchetypeId;

    /// The ID of this archetype.
    #[inline]
    #[allow(dead_code)]
    fn id(&self) -> ArchetypeId {
        Self::ID
    }

    /// Returns the number of entities in this archetype.
    fn len(&self) -> usize;

    /// Indicates whether this archetype has no entities.
    #[allow(dead_code)]
    fn is_empty(&self) -> bool {
        self.len() == 0
    }
}

/// Trait for archetypes containing the specified `Component`.
#[allow(dead_code)]
pub trait HasComponents<T: Component> {
    /// Returns a slice of all component values.
    fn get(&self) -> &[T];

    /// Returns a mutable slice of all component values.
    fn get_mut(&mut self) -> &mut [T];
}

/// Trait for entities containing the specified `Component`.
#[allow(dead_code)]
pub trait HasComponent<T: Component> {
    /// Returns the component value.
    fn get(&self) -> &T;

    /// Mutably returns the component value.
    fn get_mut(&mut self) -> &mut T;
}

/// An enumeration holding variants for entities.
#[derive(Debug, Clone)]
#[allow(dead_code)]
pub enum ArchetypeEntity {
    {%- for archetype in ecs.archetypes %}
    {%- if archetype.description %}
    /// {{ archetype.description }}
    {%- else %}
    /// An entity in the [`{{ archetype.name.raw }}`]({{ archetype.name.type }}) archetype.
    {%- endif %}
    {{ archetype.name.raw }}({{ archetype.name.raw }}Entity),
    {%- endfor %}
}

/// An enumeration holding variants for entity data, e.g. when spawning entities.
#[derive(Debug, Clone)]
#[allow(dead_code)]
pub enum ArchetypeEntityData {
    {%- for archetype in ecs.archetypes %}
    {%- if archetype.description %}
    /// {{ archetype.description }}
    {%- else %}
    /// An entity in the [`{{ archetype.name.raw }}`]({{ archetype.name.type }}) archetype.
    {%- endif %}
    {{ archetype.name.raw }}({{ archetype.name.raw }}EntityData),
    {%- endfor %}
}

#[allow(dead_code)]
impl ArchetypeEntity {
    /// Determines the [`ArchetypeId`] of this [`ArchetypeEntity`] variant.
    pub const fn archetype_id(&self) -> ArchetypeId {
        match self {
            {%- for archetype in ecs.archetypes %}
            Self::{{ archetype.name.raw }}(_) => {{ archetype.name.type }}::ID,
            {%- endfor %}
        }
    }
}

#[allow(dead_code)]
impl ArchetypeEntityData {
    /// Determines the [`ArchetypeId`] of this [`ArchetypeEntityData`] variant.
    pub const fn archetype_id(&self) -> ArchetypeId {
        match self {
            {%- for archetype in ecs.archetypes %}
            Self::{{ archetype.name.raw }}(_) => {{ archetype.name.type }}::ID,
            {%- endfor %}
        }
    }
}

/// A container for an entity with its associated data.
#[derive(Debug, Clone)]
#[allow(dead_code)]
pub struct EntityWithIdAndData<Data: EntityData> {
    pub id: EntityId,
    pub data: Data,
}

/// Marker trait for entity data.
pub trait EntityData {
    const ARCHETYPE_ID: ArchetypeId;
}

{%- for archetype in ecs.archetypes %}
{% if archetype.description %}
/// {{ archetype.description }}
{%- else %}
/// An archetype grouping entities with identical components.
{%- endif %}
#[derive(Debug, Default, Clone)]
pub struct {{ archetype.name.type }} {
    pub entities: Vec<EntityId>,
    {%- for component_name in archetype.components %}
    pub {{ component_name.fields }}: Vec<{{ component_name.type }}>,
    {%- endfor %}
}

/// An entity of the [`{{ archetype.name.type }}`].
pub type {{ archetype.name.raw }}Entity = EntityWithIdAndData<{{ archetype.name.raw }}EntityComponents>;

/// The data of an entity of the [`{{ archetype.name.type }}`].
#[derive(Debug, Clone)]
#[allow(dead_code)]
pub struct {{ archetype.name.raw }}EntityData {
    {%- for component_name in archetype.components %}
    pub {{ component_name.field }}: {{ component_name.raw }}Data,
    {%- endfor %}
}

/// An entity of the [`{{ archetype.name.type }}`].
#[derive(Debug, Clone)]
#[allow(dead_code)]
pub struct {{ archetype.name.raw }}EntityComponents {
    {%- for component_name in archetype.components %}
    pub {{ component_name.field }}: {{ component_name.type }},
    {%- endfor %}
}

impl From<{{ archetype.name.raw }}EntityData> for {{ archetype.name.raw }}EntityComponents {
    fn from(value: {{ archetype.name.raw }}EntityData) -> Self {
        Self {
            {%- for component_name in archetype.components %}
            {{ component_name.field }}: value.{{ component_name.field }}.into(),
            {%- endfor %}
        }
    }
}

impl EntityData for {{ archetype.name.raw }}EntityData {
    const ARCHETYPE_ID: ArchetypeId = {{archetype.name.type}}::ID;
}

impl EntityData for {{ archetype.name.raw }}EntityComponents {
    const ARCHETYPE_ID: ArchetypeId = {{archetype.name.type}}::ID;
}

/// A reference to an entity of the [`{{ archetype.name.type }}`].
#[derive(Debug, Clone)]
#[allow(dead_code)]
pub struct {{ archetype.name.raw }}EntityRef<'archetype> {
    pub entity_id: EntityId,
    {%- for component_name in archetype.components %}
    pub {{ component_name.field }}: &'archetype {{ component_name.type }},
    {%- endfor %}
}

/// A mutable reference to an entity of the [`{{ archetype.name.type }}`].
#[derive(Debug)]
#[allow(dead_code)]
pub struct {{ archetype.name.raw }}EntityMut<'archetype> {
    pub entity_id: EntityId,
    {%- for component_name in archetype.components %}
    pub {{ component_name.field }}: &'archetype mut {{ component_name.type }},
    {%- endfor %}
}

/// An iterator for entities in the [`{{ archetype.name.type }}`].
pub struct {{ archetype.name.raw }}EntityIterator<'archetype> {
    archetype: &'archetype {{ archetype.name.type }},
    current: usize,
    length: usize,
}

impl<'archetype> {{ archetype.name.raw }}EntityIterator<'archetype> {
    fn new(archetype: &'archetype {{ archetype.name.type }}) -> Self {
        Self {
            archetype,
            current: 0,
            length: archetype.len()
        }
    }
}

impl<'archetype> Iterator for {{ archetype.name.raw }}EntityIterator<'archetype> {
    type Item = {{ archetype.name.raw }}EntityRef<'archetype>;

    #[inline]
    fn next(&mut self) -> Option<Self::Item> {
        if self.current >= self.length {
            return None;
        }

        let idx = self.current;
        self.current += 1;

        {%- if ecs.allow_unsafe %}
        Some(unsafe { self.archetype.get_at_unchecked(idx) })
        {%- else %}
        Some({{ archetype.name.raw }}EntityRef {
            entity_id: self.archetype.entities[idx],
            {%- for component_name in archetype.components %}
            {{ component_name.field }}: &self.archetype.{{ component_name.fields }}[idx],
            {%- endfor %}
        })
        {%- endif %}
    }
}

impl {{ archetype.name.type }} {
    /// Iterates all entities in this archetype.
    #[inline]
    #[allow(dead_code)]
    pub fn iter(&self) -> {{ archetype.name.raw }}EntityIterator {
        {{ archetype.name.raw }}EntityIterator::new(self)
    }
    {%- for component in archetype.components %}

    /// Gets the `{{component.raw}}` component at the specified index.
    #[allow(dead_code)]
    #[inline]
    pub fn get_{{component.field}}_component_at(&self, index: usize) -> Option<&{{component.type}}> {
        if index > self.len() {
            return None;
        }

        {%- if ecs.allow_unsafe %}
        Some(unsafe { self.get_{{component.field}}_component_at_unchecked(index) })
        {%- else %}
        Some(&self.{{ component_name.fields }}[index])
        {%- endif %}
    }

    /// Mutably gets the `{{component.raw}}` component at the specified index.
    #[allow(dead_code)]
    #[inline]
    pub fn get_{{component.field}}_component_at_mut(&mut self, index: usize) -> Option<&mut {{component.type}}> {
        if index > self.len() {
            return None;
        }

        {%- if ecs.allow_unsafe %}
        Some(unsafe { self.get_{{component.field}}_component_at_unchecked_mut(index) })
        {%- else %}
        Some(&mut self.{{ component_name.fields }}[index])
        {%- endif %}
    }

    /// Gets the `{{component.raw}}` component at the specified index.
    #[allow(dead_code)]
    #[inline]
    pub unsafe fn get_{{component.field}}_component_at_unchecked(&self, index: usize) -> &{{component.type}} {
        self.{{ component.fields }}.get_unchecked(index)
    }

    /// Gets the `{{component.raw}}` component at the specified index.
    #[allow(dead_code)]
    #[inline]
    pub unsafe fn get_{{component.field}}_component_at_unchecked_mut(&mut self, index: usize) -> &mut {{component.type}} {
        self.{{ component.fields }}.get_unchecked_mut(index)
    }

    {%- endfor %}

    /// Gets the entity at the specified index.
    #[allow(dead_code)]
    pub fn get_entity_at(&self, index: usize) -> Option<{{ archetype.name.raw }}EntityRef> {
        if index > self.len() {
            return None;
        }

        {%- if ecs.allow_unsafe %}
        Some(unsafe { self.get_entity_at_unchecked(index) })
        {%- else %}
        Some({{ archetype.name.raw }}EntityRef {
            entity_id: self.entities[index],
            {%- for component_name in archetype.components %}
            {{ component_name.field }}: &self.{{ component_name.fields }}[index],
            {%- endfor %}
        })
        {%- endif %}
    }

    /// Mutably gets the entity at the specified index.
    #[allow(dead_code)]
    pub fn get_entity_at_mut(&mut self, index: usize) -> Option<{{ archetype.name.raw }}EntityMut> {
        if index > self.len() {
            return None;
        }

        {%- if ecs.allow_unsafe %}
        Some(unsafe { self.get_entity_at_unchecked_mut(index) })
        {%- else %}
        Some({{ archetype.name.raw }}EntityMut {
            entity_id: self.entities[index],
            {%- for component_name in archetype.components %}
            {{ component_name.field }}: &mut self.{{ component_name.fields }}[index],
            {%- endfor %}
        })
        {%- endif %}
    }

    /// Gets the entity at the specified index.
    #[allow(dead_code)]
    pub unsafe fn get_entity_at_unchecked(&self, index: usize) -> {{ archetype.name.raw }}EntityRef {
        {{ archetype.name.raw }}EntityRef {
            entity_id: *self.entities.get_unchecked(index),
            {%- for component_name in archetype.components %}
            {{ component_name.field }}: self.{{ component_name.fields }}.get_unchecked(index),
            {%- endfor %}
        }
    }

    /// Gets the entity at the specified index.
    #[allow(dead_code)]
    pub unsafe fn get_entity_at_unchecked_mut(&mut self, index: usize) -> {{ archetype.name.raw }}EntityMut {
        {{ archetype.name.raw }}EntityMut {
            entity_id: *self.entities.get_unchecked(index),
            {%- for component_name in archetype.components %}
            {{ component_name.field }}: self.{{ component_name.fields }}.get_unchecked_mut(index),
            {%- endfor %}
        }
    }
}
{%- for component_name in archetype.components %}

#[allow(dead_code)]
impl HasComponent<{{ component_name.type }}> for {{ archetype.name.raw }}Entity {
    #[inline]
    fn get(&self) -> &{{ component_name.type }} {
        &self.data.{{ component_name.field }}
    }

    #[inline]
    fn get_mut(&mut self) -> &mut {{ component_name.type }} {
        &mut self.data.{{ component_name.field }}
    }
}

#[allow(dead_code)]
impl HasComponent<{{ component_name.type }}> for {{ archetype.name.raw }}EntityComponents {
    #[inline]
    fn get(&self) -> &{{ component_name.type }} {
        &self.{{ component_name.field }}
    }

    #[inline]
    fn get_mut(&mut self) -> &mut {{ component_name.type }} {
        &mut self.{{ component_name.field }}
    }
}
{%- endfor %}
impl {{ archetype.name.raw }}EntityData {
    /// Spawn this entity into the given world.
    #[inline]
    #[allow(dead_code)]
    pub fn spawn_into<W>(self, world: &mut W) -> EntityId
    where
        W: Spawn<{{ archetype.name.raw }}EntityData>
    {
        world.spawn(self)
    }
}

impl {{ archetype.name.raw }}EntityComponents {
    /// Spawn this entity into the given world.
    #[inline]
    #[allow(dead_code)]
    pub fn spawn_into<W>(self, world: &mut W) -> EntityId
    where
        W: Spawn<{{ archetype.name.raw }}EntityComponents>
    {
        world.spawn(self)
    }
}

impl core::ops::Deref for {{ archetype.name.raw }}Entity {
    type Target = {{ archetype.name.raw }}EntityComponents;

    fn deref(&self) -> &Self::Target {
        &self.data
    }
}

impl core::ops::DerefMut for {{ archetype.name.raw }}Entity {
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.data
    }
}

#[allow(dead_code)]
impl {{ archetype.name.type }} {
    /// The IDs of the components used by this archetype, in ascending order.
    pub const COMPONENTS: [ComponentId; {{ archetype.component_count }}] = [
        {%- for id in archetype.component_ids %}
        ComponentId::COMPONENT_{{- id -}},
        {%- endfor %}
    ];

    /// Returns the number of entities in this archetype.
    #[inline(always)]
    pub fn len(&self) -> usize {
        self.entities.len()
    }

    /// Indicates whether this archetype has no entities.
    #[inline(always)]
    #[allow(dead_code)]
    pub fn is_empty(&self) -> bool {
        self.entities.is_empty()
    }

    /// Returns the number of components used by this archetype.
    #[inline(always)]
    pub const fn num_components(&self) -> usize {
        {{ archetype.component_count }}
    }

    /// Dynamically determines whether this archetype has a specific component.
    pub const fn has_components<Id>(&self, id: ComponentId) -> bool {
        let id = id.as_u64();
        {% for id in archetype.component_ids %}id == {{ id }} || {% endfor %}false
    }

    /// Spawn a new entity into the world. Must be called through the world for proper bookkeeping.
    #[doc(hidden)]
    pub fn spawn_with<R>(
        &mut self,
        {%- for component_name in archetype.components %}
        {{component_name.field}}: {{ component_name.type }},
        {%- endfor %}
        mut world_registry: R
    ) -> EntityId
    where
        R: WorldEntityRegistry
    {
        {%- for component_name in archetype.components %}
        self.{{ component_name.fields }}.push({{component_name.field}});
        {%- endfor %}

        let entity_id = EntityId::new();

        let entity_index = self.entities.len();
        self.entities.push(entity_id);

        let reference = EntityArchetypeRef {
            archetype: Self::ID,
            index: entity_index
        };

        world_registry.register(entity_id, reference)
    }

    /// Drop an entity at the specified index. Called by the world upon de-spawning entities.
    ///
    /// Returns the ID of the entity that was moved into the hole, or [`None`] if the archetype is now empty.
    #[doc(hidden)]
    pub fn drop_at_index(&mut self, index: usize) -> Result<Option<EntityId>, usize> {
        if index > self.entities.len() {
            return Err(index);
        }
        self.entities.swap_remove(index);
        {%- for component_name in archetype.components %}
        self.{{ component_name.fields }}.swap_remove(index);
        {%- endfor %}
        if self.entities.is_empty() {
            Ok(None)
        }
        else {
            Ok(Some(self.entities[index]))
        }
    }
    {%- for promotion in archetype.promotion_infos %}

    /// Promotes this [`{{ archetype.name.type }}`] to [`{{ promotion.target.type }}`].
    #[deprecated]
    pub fn promote_to_{{ promotion.target.fields }}(
        self,
        {%- for field in promotion.components_to_add %}
        {{ field.fields }}: Vec<{{ field.type }}>,
        {%- endfor %}
    ) -> {{ promotion.target.type }} {
        // TODO: Move dropped arrays to a pool? Create a trait with "recycle_<component vector>".
        {{ promotion.target.type }} {
            entities: self.entities,
            {%- for field in promotion.components_to_add %}
            {{ field.fields }},
            {%- endfor %}
            {%- for field in promotion.components_to_pass %}
            {{ field.fields }}: self.{{ field.fields }},
            {%- endfor %}
        }
    }
    {%- endfor %}
}

{% for component_name in archetype.components %}
#[automatically_derived]
impl HasComponents<{{ component_name.type }}> for {{ archetype.name.type }} {
    /// Returns a slice of all [`{{ component_name.type }}`] component values.
    fn get(&self) -> &[{{ component_name.type }}] {
        self.{{ component_name.fields }}.as_slice()
    }

    /// Returns a mutable slice of all [`{{ component_name.type }}`] component values.
    fn get_mut(&mut self) -> &mut [{{ component_name.type }}] {
        self.{{ component_name.fields }}.as_mut_slice()
    }
}
{% endfor %}

#[automatically_derived]
#[allow(dead_code)]
impl Archetype for {{ archetype.name.type }} {
    const ID: ArchetypeId = ArchetypeId::{{ archetype.name.raw }};

    fn len(&self) -> usize {
        self.entities.len()
    }

    fn is_empty(&self) -> bool {
        self.entities.is_empty()
    }
}

impl PartialEq<ArchetypeId> for {{ archetype.name.type }} {
    fn eq(&self, other: &ArchetypeId) -> bool {
        Self::ID.eq(other)
    }
}
{%- endfor %}

pub trait GetEntityRef {
    type EntityRef<'archetype>
    where
        Self: 'archetype;

    #[allow(dead_code)]
    fn is_empty(&self) -> bool;

    #[allow(clippy::needless_lifetimes, dead_code)]
    fn get_at<'archetype>(&'archetype self, index: usize) -> Option<Self::EntityRef<'archetype>>;

    #[allow(clippy::needless_lifetimes, dead_code)]
    unsafe fn get_at_unchecked<'archetype>(&'archetype self, index: usize) -> Self::EntityRef<'archetype>;
}
{%- for archetype in ecs.archetypes %}

impl core::ops::Index<usize> for {{ archetype.name.type }} {
    type Output = EntityId;

    fn index(&self, index: usize) -> &Self::Output {
        &self.entities[index]
    }
}
{%- endfor %}

#[allow(dead_code)]
pub trait FrontloadEntities:
    Archetype
    + core::ops::Index<usize, Output = EntityId>
{
    /// Frontloads entities provided by their IDs (e.g., from quadtree results).
    /// Returns the count of frontloaded entities.
    fn frontload(
        &mut self,
        entity_lookup: &mut EntityLocationMap<EntityId, EntityArchetypeRef>,
        entities_to_frontload: &[EntityId],
        previous_frontload_pivot: Option<usize>
    ) -> usize {
        // Collect and filter valid indices
        let mut indices_to_frontload: Vec<usize> = entities_to_frontload
            .iter()
            .filter_map(|id| entity_lookup.get(id))
            .filter(|id| id.archetype == Self::ID)
            .map(|id| id.index)
            .collect();

        // Sort indices to achieve linear access patterns
        // TODO: Measure; might be overkill for small numbers
        indices_to_frontload.sort_unstable();

        self.frontload_by_indices_sorted(entity_lookup, indices_to_frontload, previous_frontload_pivot)
    }

    /// Frontloads entities provided by their IDs (e.g., from quadtree results).
    ///
    /// This function operates directly on indices and assumes that the index list is sorted
    /// for coherent cache access. It works with unsorted lists but may have degraded performance.
    ///
    /// Returns the count of frontloaded entities.
    fn frontload_by_indices_sorted<I>(
        &mut self,
        entity_lookup: &mut EntityLocationMap<EntityId, EntityArchetypeRef>,
        indices_to_frontload: I,
        previous_frontload_pivot: Option<usize>
    ) -> usize
    where
        I: AsRef<[usize]>
    {
        let mut frontload_target_idx = previous_frontload_pivot.unwrap_or_default();
        let mut swaps_made = Vec::new();

        for &current_idx in indices_to_frontload.as_ref() {
            // If already frontloaded, skip
            if current_idx < frontload_target_idx {
                continue;
            }

            // If entity is exactly where it should be, no swap needed
            if current_idx == frontload_target_idx {
                frontload_target_idx += 1;
                continue;
            }

            // Swap the entity into the target frontload position
            self.swap_entities(current_idx, frontload_target_idx);

            // Track swapped entity IDs for lookup update
            let swapped_entity_id = self[current_idx];
            let frontloaded_entity_id = self[frontload_target_idx];

            swaps_made.push((frontloaded_entity_id, frontload_target_idx));
            swaps_made.push((swapped_entity_id, current_idx));

            frontload_target_idx += 1;
        }

        // Update only swapped entity positions in the lookup map
        for (eid, index) in swaps_made {
            let reference = EntityArchetypeRef {
                archetype: Self::ID,
                index
            };
            entity_lookup.insert(eid, reference);
        }

        frontload_target_idx
    }

    /// Swaps two entities in the archetype.
    ///
    /// Note that this function is meant to be called internally and does **not** perform any bookkeeping
    /// such as updating the world's entity location map.
    #[doc(hidden)]
    fn swap_entities(&mut self, current_idx: usize, new_idx: usize);
}

#[allow(dead_code)]
pub trait FrontloadEntitiesScan:
    Archetype
    + FrontloadEntities
    + GetEntityRef
    + core::ops::Index<usize, Output = EntityId>
{
    /// Frontloads entities satisfying `should_frontload`.
    /// Returns the number of entities frontloaded.
    fn frontload_scan<F>(
        &mut self,
        entity_lookup: &mut EntityLocationMap<EntityId, EntityArchetypeRef>,
        mut should_frontload: F,
    ) -> usize
    where
        for<'archetype> F: FnMut(&<Self as GetEntityRef>::EntityRef<'archetype>) -> bool,
    {
        if Archetype::is_empty(self) {
            return 0;
        }

        let mut left = 0;
        let mut right = self.len().wrapping_sub(1);
        let mut swaps_made = Vec::new();

        loop {
            // Move left pointer forward until an invalid entry is found
            while left <= right {
                {%- if ecs.allow_unsafe %}
                let reference = unsafe { self.get_at_unchecked(left) };
                {%- else %}
                let Some(reference) = self.get_at(left) else {
                    break;
                };
                {%- endif %}
                if should_frontload(&reference) {
                    left += 1;
                } else {
                    break;
                }
            }

            // Move right pointer backward until a valid entry is found
            while left <= right {
                {%- if ecs.allow_unsafe %}
                let reference = unsafe { self.get_at_unchecked(right) };
                {%- else %}
                let Some(reference) = self.get_at(right) else {
                    break;
                };
                {%- endif %}
                if !should_frontload(&reference) {
                    right = right.wrapping_sub(1);
                } else {
                    break;
                }
            }

            if left >= right {
                break;
            }

            // Swap entities and record swapped indices
            self.swap_entities(left, right);
            swaps_made.push((left, self[left]));
            swaps_made.push((right, self[right]));

            left += 1;
            right = right.wrapping_sub(1);
        }

        // Only update indices for swapped entities
        for (index, entity_id) in swaps_made {
            let reference = EntityArchetypeRef {
                archetype: Self::ID,
                index,
            };
            entity_lookup.insert(entity_id, reference);
        }

        // At this point, `left` indicates how many entities are valid (frontloaded)
        left
    }
}
{%- for archetype in ecs.archetypes %}

impl GetEntityRef for {{ archetype.name.type }} {
    type EntityRef<'archetype> = {{ archetype.name.raw }}EntityRef<'archetype>;

    #[allow(dead_code)]
    fn is_empty(&self) -> bool {
       self.is_empty()
    }

    /// See [`{{ archetype.name.type }}::get_at`]({{ archetype.name.type }}::get_at).
    #[inline(always)]
    #[allow(clippy::needless_lifetimes, dead_code)]
    fn get_at<'archetype>(&'archetype self, index: usize) -> Option<Self::EntityRef<'archetype>> {
        self.get_entity_at(index)
    }

    /// See [`{{ archetype.name.type }}::get_at_unchecked`]({{ archetype.name.type }}::get_at_unchecked).
    #[inline(always)]
    #[allow(clippy::needless_lifetimes, dead_code)]
    unsafe fn get_at_unchecked<'archetype>(&'archetype self, index: usize) -> Self::EntityRef<'archetype> {
        unsafe { self.get_entity_at_unchecked(index) }
    }
}
{%- endfor %}
{%- for archetype in ecs.archetypes %}

impl FrontloadEntities for {{ archetype.name.type }} {
    #[inline(always)]
    #[doc(hidden)]
    fn swap_entities(&mut self, first: usize, second: usize) {
        self.entities.swap(first, second);
        {%- for component in archetype.components %}
        self.{{ component.fields }}.swap(first, second);
        {%- endfor %}
    }
}

impl FrontloadEntitiesScan for {{ archetype.name.type }} { }
{%- endfor %}
