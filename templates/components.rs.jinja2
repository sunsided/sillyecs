/// The ID of a [`Component`].
#[derive(Debug, Copy, Clone, Ord, PartialOrd, Eq, PartialEq)]
#[repr(u32)]
pub enum ComponentId {
    {%- for component in ecs.components %}
    {%- if component.description %}
    /// {{ component.description }}
    ///
    /// For details, see the [`{{ component.name.type }}`]({{ component.name.type }}) Struct.
    {%- else %}
    /// The [`{{ component.name.raw }}`]({{ component.name.type }}) component.
    {%- endif %}
    {%- if component.affected_archetype_count > 0 %}
    ///
    /// # Archetype Use
    /// This component is used by the following archetypes:
    /// {% for archetype in component.affected_archetypes %}
    /// - [`{{archetype.type}}`] ([`ArchetypeId::{{archetype.raw}}`]){%- endfor %}
    {%- endif %}
    {%- if component.affected_archetype_count > 0 %}
    ///
    /// # System Use
    /// This component is used by the following systems:
    /// {% for system in component.affected_systems %}
    /// - [`{{system.type}}`] ([`SystemId::{{system.raw}}`]){%- endfor %}
    {%- endif %}
    {{ component.name.raw }} = {{ component.id }},
    {%- endfor %}
}

#[allow(dead_code)]
impl ComponentId {
    {%- for component in ecs.components %}
    /// A [`NonZeroU64`](core::num::NonZeroU64) representation of [`ComponentId::{{ component.name.raw }}`](ComponentId::{{ component.name.raw }}) component.
    pub const {{ component.name.field | upper }}_ID_VALUE: core::num::NonZeroU64 = core::num::NonZeroU64::new({{ component.id }}).expect("Error at ECS construction time");
    {%- endfor %}
}

#[allow(dead_code)]
impl ComponentId {
    {%- for component in ecs.components %}
    /// Compile-time constant lookup of [`ComponentId::{{ component.name.raw }}`](ComponentId::{{ component.name.raw }}).
    const COMPONENT_{{ component.id }}: ComponentId = ComponentId::{{ component.name.raw }};
    {%- endfor %}
}

#[allow(dead_code)]
impl ComponentId {
    /// Returns this ID as a [`NonZeroU64`](core::num::NonZeroU64) value.
    pub const fn as_nonzero_u64(&self) -> core::num::NonZeroU64 {
        match self {
            {%- for component in ecs.components %}
            Self::{{ component.name.raw }} => Self::{{ component.name.field | upper }}_ID_VALUE,
            {%- endfor %}
        }
    }

    /// Returns this ID as a `u64` value.
    pub const fn as_u64(&self) -> u64 {
        self.as_nonzero_u64().get()
    }
}

impl core::hash::Hash for ComponentId {
    fn hash<H: core::hash::Hasher>(&self, state: &mut H) {
        self.as_u64().hash(state);
    }
}

impl From<ComponentId> for core::num::NonZeroU64 {
    fn from(value: ComponentId) -> core::num::NonZeroU64 {
        value.as_nonzero_u64()
    }
}

impl From<ComponentId> for u64 {
    fn from(value: ComponentId) -> u64 {
        value.as_u64()
    }
}

impl core::fmt::Display for ComponentId {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> Result<(), core::fmt::Error> {
        match self {
            {%- for component in ecs.components %}
            Self::{{ component.name.raw }} => write!(f, "{{ component.name.raw }} (ID {{ component.id }})"),
            {%- endfor %}
        }
    }
}

/// Marker trait for components.
pub trait Component: 'static + Send + Sync {
    /// The ID of this component.
    const ID: ComponentId;

    /// The ID of this component.
    #[inline]
    #[allow(dead_code)]
    fn id(&self) -> ComponentId {
        Self::ID
    }
}

{%- for component in ecs.components %}
{% if component.description %}
/// {{ component.description }}
{%- else %}
/// A `{{ component.name.raw }}` component.
{%- endif %}
///
/// See also [`{{ component.name.raw }}Data`] for the actual data.
{%- if component.affected_archetype_count > 0 %}
///
/// # Archetype Use
/// This component is used by the following archetypes:
/// {% for archetype in component.affected_archetypes %}
/// - [`{{archetype.type}}`] ([`ArchetypeId::{{archetype.raw}}`]){%- endfor %}
{%- endif %}
{%- if component.affected_archetype_count > 0 %}
///
/// # System Use
/// This component is used by the following systems:
/// {% for system in component.affected_systems %}
/// - [`{{system.type}}`] ([`SystemId::{{system.raw}}`]){%- endfor %}
{%- endif %}
#[derive(Debug, Clone)]
pub struct {{ component.name.type }}({{ component.name.raw }}Data);

#[allow(dead_code)]
impl {{ component.name.type }} {
    /// Creates a new [`{{ component.name.type }}`] instance from [`{{ component.name.raw }}Data`].
    pub const fn new(data: {{ component.name.raw }}Data) -> Self {
        Self(data)
    }
}

#[automatically_derived]
impl Component for {{ component.name.type }} {
    const ID: ComponentId = ComponentId::{{ component.name.raw }};
}

impl PartialEq<ComponentId> for {{ component.name.type }} {
    fn eq(&self, other: &ComponentId) -> bool {
        Self::ID.eq(other)
    }
}

#[automatically_derived]
impl From<{{ component.name.raw }}Data> for {{ component.name.type }} {
    fn from(data: {{ component.name.raw }}Data) -> Self {
        Self(data)
    }
}

#[automatically_derived]
impl core::ops::Deref for {{ component.name.type }} {
    type Target = {{ component.name.raw }}Data;

    fn deref(&self) -> &Self::Target {
        &self.0
    }
}

#[automatically_derived]
impl core::ops::DerefMut for {{ component.name.type }} {
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.0
    }
}

#[automatically_derived]
impl core::convert::AsRef<{{ component.name.raw }}Data> for {{ component.name.type }} {
    fn as_ref(&self) -> &{{ component.name.raw }}Data {
        &self.0
    }
}

#[automatically_derived]
impl core::convert::AsMut<{{ component.name.raw }}Data> for {{ component.name.type }} {
    fn as_mut(&mut self) -> &mut {{ component.name.raw }}Data {
        &mut self.0
    }
}

#[automatically_derived]
impl core::borrow::Borrow<{{ component.name.raw }}Data> for {{ component.name.type }} {
    fn borrow(&self) -> &{{ component.name.raw }}Data {
        &self.0
    }
}

#[automatically_derived]
impl core::borrow::BorrowMut<{{ component.name.raw }}Data> for {{ component.name.type }} {
    fn borrow_mut(&mut self) -> &mut {{ component.name.raw }}Data {
        &mut self.0
    }
}

{%- endfor %}
