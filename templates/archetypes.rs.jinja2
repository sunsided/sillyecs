/// The ID of an entity.
#[derive(Debug, Copy, Clone, Ord, PartialOrd, Eq, PartialEq)]
pub struct EntityId(core::num::NonZeroU64);

#[allow(dead_code)]
impl EntityId {
    /// Returns a new, unique entity ID.
    ///
    /// Uniqueness is guaranteed by using a monotonically increasing `AtomicU64` counter
    /// for generating IDs, starting from 1.
    ///
    /// # Implementation
    /// This function uses a thread-safe counter with sequential consistency ordering
    /// to ensure unique IDs even under concurrent access.
    pub fn new() -> Self {
        static ENTITY_IDS: core::sync::atomic::AtomicU64 = core::sync::atomic::AtomicU64::new(1);
        let id = ENTITY_IDS.fetch_add(1, core::sync::atomic::Ordering::SeqCst);
        EntityId(core::num::NonZeroU64::new(id).expect("ID was zero"))
    }

    /// Returns this ID as a [`NonZeroU64`](core::num::NonZeroU64) value.
    pub const fn as_nonzero_u64(&self) -> core::num::NonZeroU64 {
        self.0
    }

    /// Returns this ID as a `u64` value.
    pub const fn as_u64(&self) -> u64 {
        self.0.get()
    }
}

impl core::hash::Hash for EntityId {
    fn hash<H: core::hash::Hasher>(&self, state: &mut H) {
        self.0.hash(state);
    }
}

impl From<EntityId> for core::num::NonZeroU64 {
    fn from(value: EntityId) -> core::num::NonZeroU64 {
        value.as_nonzero_u64()
    }
}

impl From<EntityId> for u64 {
    fn from(value: EntityId) -> u64 {
        value.as_u64()
    }
}

impl core::fmt::Display for EntityId {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> Result<(), core::fmt::Error> {
        core::fmt::Display::fmt(&self.0.get(), f)
    }
}

/// The ID of an [`Archetype`].
#[derive(Debug, Copy, Clone, Ord, PartialOrd, Eq, PartialEq)]
pub struct ArchetypeId(core::num::NonZeroU64);

#[allow(dead_code)]
impl ArchetypeId {
    /// Returns this ID as a [`NonZeroU64`](core::num::NonZeroU64) value.
    pub const fn as_nonzero_u64(&self) -> core::num::NonZeroU64 {
        self.0
    }

    /// Returns this ID as a `u64` value.
    pub const fn as_u64(&self) -> u64 {
            self.0.get()
    }
}

impl core::hash::Hash for ArchetypeId {
    fn hash<H: core::hash::Hasher>(&self, state: &mut H) {
        self.0.hash(state);
    }
}

impl From<ArchetypeId> for core::num::NonZeroU64 {
    fn from(value: ArchetypeId) -> core::num::NonZeroU64 {
        value.as_nonzero_u64()
    }
}

impl From<ArchetypeId> for u64 {
    fn from(value: ArchetypeId) -> u64 {
        value.as_u64()
    }
}

impl core::fmt::Display for ArchetypeId {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> Result<(), core::fmt::Error> {
        match self.0.get() {
            {%- for archetype in ecs.archetypes %}
            {{ archetype.id }} => write!(f, "{{ archetype.name.raw }} (Archetype ID {{ archetype.id }})"),
            {%- endfor %}
            id => write!(f, "Archetype ID {id}")
        }
    }
}

/// A locator for an entity across archetypes.
#[derive(Debug, Clone, Eq, PartialEq, Ord, PartialOrd, Hash)]
pub struct EntityArchetypeRef {
    /// The ID of the archetype the entity is in.
    pub archetype: ArchetypeId,

    /// The Entity's index within that archetype.
    pub index: usize
}

/// Spawns an entity into the world.
#[allow(dead_code)]
pub trait Spawn<E> {
    /// Spawn a new entity into the world.
    fn spawn(&mut self, data: E) -> EntityId;
}

/// Marker trait for archetypes.
#[allow(dead_code)]
pub trait Archetype: 'static + Send + Sync {
    /// The ID of this archetype.
    const ID: ArchetypeId;

    /// The ID of this archetype.
    #[inline]
    #[allow(dead_code)]
    fn id(&self) -> ArchetypeId {
        Self::ID
    }

    /// Returns the number of entities in this archetype.
    fn len(&self) -> usize;

    /// Indicates whether this archetype has no entities.
    fn is_empty(&self) -> bool {
        self.len() == 0
    }
}

/// Trait for archetypes containing the specified `Component`.
#[allow(dead_code)]
pub trait HasComponents<T: Component> {
    /// Returns a slice of all component values.
    fn get(&self) -> &[T];

    /// Returns a mutable slice of all component values.
    fn get_mut(&mut self) -> &mut [T];
}

/// Trait for entities containing the specified `Component`.
#[allow(dead_code)]
pub trait HasComponent<T: Component> {
    /// Returns the component value.
    fn get(&self) -> &T;

    /// Mutably returns the component value.
    fn get_mut(&mut self) -> &mut T;
}

/// An enumeration holding variants for entities.
#[derive(Debug, Clone)]
#[allow(dead_code)]
pub enum ArchetypeEntity {
    {%- for archetype in ecs.archetypes %}
    {%- if archetype.description %}
    /// {{ archetype.description }}
    {%- else %}
    /// An entity in the [`{{ archetype.name.raw }}`]({{ archetype.name.type }}) archetype.
    {%- endif %}
    {{ archetype.name.raw }}({{ archetype.name.raw }}Entity),
    {%- endfor %}
}

/// An enumeration holding variants for entity data, e.g. when spawning entities.
#[derive(Debug, Clone)]
#[allow(dead_code)]
pub enum ArchetypeEntityData {
    {%- for archetype in ecs.archetypes %}
    {%- if archetype.description %}
    /// {{ archetype.description }}
    {%- else %}
    /// An entity in the [`{{ archetype.name.raw }}`]({{ archetype.name.type }}) archetype.
    {%- endif %}
    {{ archetype.name.raw }}({{ archetype.name.raw }}EntityData),
    {%- endfor %}
}

#[allow(dead_code)]
impl ArchetypeEntity {
    /// Determines the [`ArchetypeId`] of this [`ArchetypeEntity`] variant.
    pub const fn archetype_id(&self) -> ArchetypeId {
        match self {
            {%- for archetype in ecs.archetypes %}
            Self::{{ archetype.name.raw }}(_) => {{ archetype.name.type }}::ID,
            {%- endfor %}
        }
    }
}

#[allow(dead_code)]
impl ArchetypeEntityData {
    /// Determines the [`ArchetypeId`] of this [`ArchetypeEntityData`] variant.
    pub const fn archetype_id(&self) -> ArchetypeId {
        match self {
            {%- for archetype in ecs.archetypes %}
            Self::{{ archetype.name.raw }}(_) => {{ archetype.name.type }}::ID,
            {%- endfor %}
        }
    }
}

/// A container for an entity with its associated data.
#[derive(Debug, Clone)]
#[allow(dead_code)]
pub struct EntityWithIdAndData<Data: EntityData> {
    pub id: EntityId,
    pub data: Data,
}

/// Marker trait for entity data.
pub trait EntityData {
    const ARCHETYPE_ID: ArchetypeId;
}

{%- for archetype in ecs.archetypes %}
{% if archetype.description %}
/// {{ archetype.description }}
{%- else %}
/// An archetype grouping entities with identical components.
{%- endif %}
#[derive(Debug, Default, Clone)]
pub struct {{ archetype.name.type }} {
    pub entities: Vec<EntityId>,
    {%- for component_name in archetype.components %}
    pub {{ component_name.fields }}: Vec<{{ component_name.type }}>,
    {%- endfor %}
}

/// An entity of the [`{{ archetype.name.type }}`].
pub type {{ archetype.name.raw }}Entity = EntityWithIdAndData<{{ archetype.name.raw }}EntityData>;

/// An entity of the [`{{ archetype.name.type }}`].
#[derive(Debug, Clone)]
#[allow(dead_code)]
pub struct {{ archetype.name.raw }}EntityData {
    {%- for component_name in archetype.components %}
    pub {{ component_name.field }}: {{ component_name.type }},
    {%- endfor %}
}

impl EntityData for {{ archetype.name.raw }}EntityData {
    const ARCHETYPE_ID: ArchetypeId = {{archetype.name.type}}::ID;
}

/// A reference to an entity of the [`{{ archetype.name.type }}`].
#[derive(Debug, Clone)]
#[allow(dead_code)]
pub struct {{ archetype.name.raw }}EntityRef<'archetype> {
    pub entity_id: EntityId,
    {%- for component_name in archetype.components %}
    pub {{ component_name.field }}: &'archetype {{ component_name.type }},
    {%- endfor %}
}

/// An iterator for entities in the [`{{ archetype.name.type }}`].
pub struct {{ archetype.name.raw }}EntityIterator<'archetype> {
    archetype: &'archetype {{ archetype.name.type }},
    current: usize,
    length: usize,
}

impl<'archetype> {{ archetype.name.raw }}EntityIterator<'archetype> {
    fn new(archetype: &'archetype {{ archetype.name.type }}) -> Self {
        Self {
            archetype,
            current: 0,
            length: archetype.len()
        }
    }
}

impl<'archetype> Iterator for {{ archetype.name.raw }}EntityIterator<'archetype> {
    type Item = {{ archetype.name.raw }}EntityRef<'archetype>;

    #[inline]
    fn next(&mut self) -> Option<Self::Item> {
        if self.current >= self.length {
            return None;
        }

        let idx = self.current;
        self.current += 1;

        {%- if ecs.allow_unsafe %}
        unsafe {
            Some({{ archetype.name.raw }}EntityRef {
                entity_id: self.archetype.entities[idx],
                {%- for component_name in archetype.components %}
                {{ component_name.field }}: &self.archetype.{{ component_name.fields }}.get_unchecked(idx),
                {%- endfor %}
            })
        }
        {%- else %}
        Some({{ archetype.name.raw }}EntityRef {
            entity_id: self.archetype.entities[idx],
            {%- for component_name in archetype.components %}
            {{ component_name.field }}: &self.archetype.{{ component_name.fields }}[idx],
            {%- endfor %}
        })
        {%- endif %}
    }
}

impl {{ archetype.name.type }} {
    /// Iterates all entities in this archetype.
    #[inline]
    #[allow(dead_code)]
    pub fn iter(&self) -> {{ archetype.name.raw }}EntityIterator {
        {{ archetype.name.raw }}EntityIterator::new(self)
    }
}
{%- for component_name in archetype.components %}

#[allow(dead_code)]
impl HasComponent<{{ component_name.type }}> for {{ archetype.name.raw }}Entity {
    #[inline]
    fn get(&self) -> &{{ component_name.type }} {
        &self.data.{{ component_name.field }}
    }

    #[inline]
    fn get_mut(&mut self) -> &mut {{ component_name.type }} {
        &mut self.data.{{ component_name.field }}
    }
}

#[allow(dead_code)]
impl HasComponent<{{ component_name.type }}> for {{ archetype.name.raw }}EntityData {
    #[inline]
    fn get(&self) -> &{{ component_name.type }} {
        &self.{{ component_name.field }}
    }

    #[inline]
    fn get_mut(&mut self) -> &mut {{ component_name.type }} {
        &mut self.{{ component_name.field }}
    }
}
{%- endfor %}
impl {{ archetype.name.raw }}EntityData {
    /// Spawn this entity into the given world.
    #[inline]
    #[allow(dead_code)]
    pub fn spawn_into<W>(self, world: &mut W) -> EntityId
    where
        W: Spawn<{{ archetype.name.raw}}EntityData>
    {
        world.spawn(self)
    }
}

impl core::ops::Deref for {{ archetype.name.raw }}Entity {
    type Target = {{ archetype.name.raw }}EntityData;

    fn deref(&self) -> &Self::Target {
        &self.data
    }
}

impl core::ops::DerefMut for {{ archetype.name.raw }}Entity {
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.data
    }
}

#[allow(dead_code)]
impl {{ archetype.name.type }} {
    /// The IDs of the components used by this archetype, in ascending order.
    pub const COMPONENT_IDS: [ComponentId; {{ archetype.component_count }}] = [
        {%- for id in archetype.component_ids %}
        ComponentId::new({{- id -}}).expect("Invalid ID on ECS construction time"),
        {%- endfor %}
    ];

    /// Returns the number of entities in this archetype.
    #[inline(always)]
    pub fn len(&self) -> usize {
        self.entities.len()
    }

    /// Indicates whether this archetype has no entities.
    #[inline(always)]
    pub fn is_empty(&self) -> bool {
        self.entities.is_empty()
    }

    /// Returns the number of components used by this archetype.
    #[inline(always)]
    pub const fn num_components(&self) -> usize {
        {{ archetype.component_count }}
    }

    /// Dynamically determines whether this archetype has a specific component.
    pub const fn has_components<Id>(&self, id: ComponentId) -> bool {
        let id = id.as_u64();
        {% for id in archetype.component_ids %}id == {{ id }} || {% endfor %}false
    }

    /// Spawn a new entity into the world. Must be called through the world for proper bookkeeping.
    #[doc(hidden)]
    pub fn spawn_with<R>(
        &mut self,
        {%- for component_name in archetype.components %}
        {{component_name.field}}: {{ component_name.type }},
        {%- endfor %}
        mut world_registry: R
    ) -> EntityId
    where
        R: WorldEntityRegistry
    {
        {%- for component_name in archetype.components %}
        self.{{ component_name.fields }}.push({{component_name.field}});
        {%- endfor %}

        let entity_id = EntityId::new();

        let entity_index = self.entities.len();
        self.entities.push(entity_id);

        let reference = EntityArchetypeRef {
            archetype: Self::ID,
            index: entity_index
        };

        world_registry.register(entity_id, reference)
    }

    /// Drop an entity at the specified index. Called by the world upon de-spawning entities.
    ///
    /// Returns the ID of the entity that was moved into the hole, or [`None`] if the archetype is now empty.
    #[doc(hidden)]
    pub fn drop_at_index(&mut self, index: usize) -> Result<Option<EntityId>, usize> {
        if index > self.entities.len() {
            return Err(index);
        }
        self.entities.swap_remove(index);
        {%- for component_name in archetype.components %}
        self.{{ component_name.fields }}.swap_remove(index);
        {%- endfor %}
        if self.entities.is_empty() {
            Ok(None)
        }
        else {
            Ok(Some(self.entities[index]))
        }
    }
    {%- for promotion in archetype.promotion_infos %}

    /// Promotes this [`{{ archetype.name.type }}`] to [`{{ promotion.target.type }}`].
    #[deprecated]
    pub fn promote_to_{{ promotion.target.fields }}(
        self,
        {%- for field in promotion.components_to_add %}
        {{ field.fields }}: Vec<{{ field.type }}>,
        {%- endfor %}
    ) -> {{ promotion.target.type }} {
        // TODO: Move dropped arrays to a pool? Create a trait with "recycle_<component vector>".
        {{ promotion.target.type }} {
            entities: self.entities,
            {%- for field in promotion.components_to_add %}
            {{ field.fields }},
            {%- endfor %}
            {%- for field in promotion.components_to_pass %}
            {{ field.fields }}: self.{{ field.fields }},
            {%- endfor %}
        }
    }
    {%- endfor %}
}

{% for component_name in archetype.components %}
#[automatically_derived]
impl HasComponents<{{ component_name.type }}> for {{ archetype.name.type }} {
    /// Returns a slice of all [`{{ component_name.type }}`] component values.
    fn get(&self) -> &[{{ component_name.type }}] {
        self.{{ component_name.fields }}.as_slice()
    }

    /// Returns a mutable slice of all [`{{ component_name.type }}`] component values.
    fn get_mut(&mut self) -> &mut [{{ component_name.type }}] {
        self.{{ component_name.fields }}.as_mut_slice()
    }
}
{% endfor %}

#[automatically_derived]
#[allow(dead_code)]
impl Archetype for {{ archetype.name.type }} {
    const ID: ArchetypeId = ArchetypeId(core::num::NonZeroU64::new({{ archetype.id }}).expect("A zero archetype ID was provided"));

    fn len(&self) -> usize {
        self.entities.len()
    }

    fn is_empty(&self) -> bool {
        self.entities.is_empty()
    }
}

impl PartialEq<ArchetypeId> for {{ archetype.name.type }} {
    fn eq(&self, other: &ArchetypeId) -> bool {
        Self::ID.eq(other)
    }
}

{%- endfor %}
