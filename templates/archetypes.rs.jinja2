/// The ID of an entity.
#[derive(Debug, Copy, Clone, Ord, PartialOrd, Eq, PartialEq)]
pub struct EntityId(std::num::NonZeroU64);

#[allow(dead_code)]
impl EntityId {
    /// Returns a new, unique entity ID.
    ///
    /// Uniqueness is guaranteed by using a monotonically increasing `AtomicU64` counter
    /// for generating IDs, starting from 1.
    ///
    /// # Implementation
    /// This function uses a thread-safe counter with sequential consistency ordering
    /// to ensure unique IDs even under concurrent access.
    pub fn new() -> Self {
        static ENTITY_IDS: std::sync::atomic::AtomicU64 = std::sync::atomic::AtomicU64::new(1);
        let id = ENTITY_IDS.fetch_add(1, std::sync::atomic::Ordering::SeqCst);
        EntityId(std::num::NonZeroU64::new(id).expect("ID was zero"))
    }

    /// Returns this ID as a [`NonZeroU64`](std::num::NonZeroU64) value.
    pub const fn as_nonzero_u64(&self) -> std::num::NonZeroU64 {
        self.0
    }

    /// Returns this ID as a `u64` value.
    pub const fn as_u64(&self) -> u64 {
            self.0.get()
    }
}

impl std::hash::Hash for EntityId {
    fn hash<H: std::hash::Hasher>(&self, state: &mut H) {
        self.0.hash(state);
    }
}

impl From<EntityId> for std::num::NonZeroU64 {
    fn from(value: EntityId) -> std::num::NonZeroU64 {
        value.as_nonzero_u64()
    }
}

impl From<EntityId> for u64 {
    fn from(value: EntityId) -> u64 {
        value.as_u64()
    }
}

/// The ID of an [`Archetype`].
#[derive(Debug, Copy, Clone, Ord, PartialOrd, Eq, PartialEq)]
pub struct ArchetypeId(std::num::NonZeroU64);

#[allow(dead_code)]
impl ArchetypeId {
    /// Returns this ID as a [`NonZeroU64`](std::num::NonZeroU64) value.
    pub const fn as_nonzero_u64(&self) -> std::num::NonZeroU64 {
        self.0
    }

    /// Returns this ID as a `u64` value.
    pub const fn as_u64(&self) -> u64 {
            self.0.get()
    }
}

impl std::hash::Hash for ArchetypeId {
    fn hash<H: std::hash::Hasher>(&self, state: &mut H) {
        self.0.hash(state);
    }
}

impl From<ArchetypeId> for std::num::NonZeroU64 {
    fn from(value: ArchetypeId) -> std::num::NonZeroU64 {
        value.as_nonzero_u64()
    }
}

impl From<ArchetypeId> for u64 {
    fn from(value: ArchetypeId) -> u64 {
        value.as_u64()
    }
}

/// A locator for an entity across archetypes.
#[derive(Debug, Clone, Eq, PartialEq, Ord, PartialOrd, Hash)]
pub struct EntityArchetypeRef {
    /// The ID of the archetype the entity is in.
    pub archetype: ArchetypeId,

    /// The Entity's index within that archetype.
    pub index: usize
}

/// Marker trait for archetypes.
#[allow(dead_code)]
pub trait Archetype: 'static + Send + Sync {
    /// The ID of this archetype.
    const ID: ArchetypeId;

    /// Returns the number of entities in this archetype.
    fn len(&self) -> usize;

    /// Indicates whether this archetype has no entities.
    fn is_empty(&self) -> bool {
        self.len() == 0
    }
}

/// Trait for archetypes containing the specified `Component`.
#[allow(dead_code)]
pub trait HasComponent<T: Component> {
    /// Returns a slice of all component values.
    fn get(&self) -> &[T];

    /// Returns a mutable slice of all component values.
    fn get_mut(&mut self) -> &mut [T];
}

{%- for archetype in ecs.archetypes %}
{% if archetype.description %}
/// {{ archetype.description }}
{%- else %}
/// An archetype grouping entities with identical components.
{%- endif %}
#[derive(Debug, Default, Clone)]
pub struct {{ archetype.name.type }} {
    pub entities: Vec<EntityId>,
    {%- for component_name in archetype.components %}
    pub {{ component_name.fields }}: Vec<{{ component_name.type }}>,
    {%- endfor %}
}

/// An entity of the [`{{ archetype.name.type }}`].
#[derive(Debug, Clone)]
#[allow(dead_code)]
pub struct {{ archetype.name.raw }}Entity {
    pub id: EntityId,
    pub data: {{ archetype.name.raw }}EntityData,
}

/// An entity of the [`{{ archetype.name.type }}`].
#[derive(Debug, Clone)]
#[allow(dead_code)]
pub struct {{ archetype.name.raw }}EntityData {
    {%- for component_name in archetype.components %}
    pub {{ component_name.field }}: {{ component_name.type }},
    {%- endfor %}
}

impl std::ops::Deref for {{ archetype.name.raw }}Entity {
    type Target = {{ archetype.name.raw }}EntityData;

    fn deref(&self) -> &Self::Target {
        &self.data
    }
}

impl std::ops::DerefMut for {{ archetype.name.raw }}Entity {
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.data
    }
}

#[allow(dead_code)]
impl {{ archetype.name.type }} {
    /// The IDs of the components used by this archetype, in ascending order.
    pub const COMPONENT_IDS: [ComponentId; {{ archetype.component_count }}] = [
        {%- for id in archetype.component_ids %}
        ComponentId::new({{- id -}}).expect("Invalid ID on ECS construction time"),
        {%- endfor %}
    ];

    /// Returns the number of entities in this archetype.
    #[inline(always)]
    pub fn len(&self) -> usize {
        self.entities.len()
    }

    /// Indicates whether this archetype has no entities.
    #[inline(always)]
    pub fn is_empty(&self) -> bool {
        self.entities.is_empty()
    }

    /// Returns the number of components used by this archetype.
    #[inline(always)]
    pub const fn num_components(&self) -> usize {
        {{ archetype.component_count }}
    }

    /// Dynamically determines whether this archetype has a specific component.
    pub const fn has_components<Id>(&self, id: ComponentId) -> bool {
        let id = id.as_u64();
        {% for id in archetype.component_ids %}id == {{ id }} || {% endfor %}false
    }

    /// Spawn a new entity into the world.
    pub fn spawn_with(
        &mut self,
        {%- for component_name in archetype.components %}
        {{component_name.field}}: {{ component_name.type }},
        {%- endfor %}
    ) -> (EntityId, EntityArchetypeRef) {
        {%- for component_name in archetype.components %}
        self.{{ component_name.fields }}.push({{component_name.field}});
        {%- endfor %}

        let entity_id = EntityId::new();

        let entity_index = self.entities.len();
        self.entities.push(entity_id);

        let reference = EntityArchetypeRef {
            archetype: Self::ID,
            index: entity_index
        };
        (entity_id, reference)
    }

    {%- for promotion in archetype.promotion_infos %}

    /// Promotes this [`{{ archetype.name.type }}`] to [`{{ promotion.target.type }}`].
    pub fn promote_to_{{ promotion.target.fields }}(
        self,
        {%- for field in promotion.components_to_add %}
        {{ field.fields }}: Vec<{{ field.type }}>,
        {%- endfor %}
    ) -> {{ promotion.target.type }} {
        // TODO: Move dropped arrays to a pool? Create a trait with "recycle_<component vector>".
        {{ promotion.target.type }} {
            entities: self.entities,
            {%- for field in promotion.components_to_add %}
            {{ field.fields }},
            {%- endfor %}
            {%- for field in promotion.components_to_pass %}
            {{ field.fields }}: self.{{ field.fields }},
            {%- endfor %}
        }
    }
    {%- endfor %}
}

{% for component_name in archetype.components %}
#[automatically_derived]
impl HasComponent<{{ component_name.type }}> for {{ archetype.name.type }} {
    /// Returns a slice of all [`{{ component_name.type }}`] component values.
    fn get(&self) -> &[{{ component_name.type }}] {
        &self.{{ component_name.fields }}
    }

    /// Returns a mutable slice of all [`{{ component_name.type }}`] component values.
    fn get_mut(&mut self) -> &mut [{{ component_name.type }}] {
        &mut self.{{ component_name.fields }}
    }
}
{% endfor %}

#[automatically_derived]
#[allow(dead_code)]
impl Archetype for {{ archetype.name.type }} {
    const ID: ArchetypeId = ArchetypeId(std::num::NonZeroU64::new({{ archetype.id }}).expect("A zero archetype ID was provided"));

    fn len(&self) -> usize {
        self.entities.len()
    }

    fn is_empty(&self) -> bool {
        self.entities.is_empty()
    }
}

impl PartialEq<ArchetypeId> for {{ archetype.name.type }} {
    fn eq(&self, other: &ArchetypeId) -> bool {
        Self::ID.eq(other)
    }
}

{%- endfor %}
