/// The ID of an [`Archetype`].
#[derive(Debug, Copy, Clone, Ord, PartialOrd, Eq, PartialEq, Hash)]
pub struct ArchetypeId(std::num::NonZeroU64);

impl ArchetypeId {
    /// Returns this ID as a [`NonZeroU64`](std::num::NonZeroU64) value.
    pub const fn as_nonzero_u64(&self) -> std::num::NonZeroU64 {
        self.0
    }

    /// Returns this ID as a `u64` value.
    pub const fn as_u64(&self) -> u64 {
            self.0.get()
    }
}

impl From<ArchetypeId> for std::num::NonZeroU64 {
    fn from(value: ArchetypeId) -> std::num::NonZeroU64 {
        value.as_nonzero_u64()
    }
}

impl From<ArchetypeId> for u64 {
    fn from(value: ArchetypeId) -> u64 {
        value.as_u64()
    }
}

/// Marker trait for archetypes.
pub trait Archetype: 'static + Send + Sync {
    /// The ID of this archetype.
    const ID: ArchetypeId;

    /// Returns the number of entities in this archetype.
    fn len(&self) -> usize;

    /// Indicates whether this archetype has no entities.
    fn is_empty(&self) -> bool {
        self.len() == 0
    }
}

/// Trait for archetypes containing the specified `Component`.
pub trait HasComponent<T: Component> {
    /// Returns a slice of all component values.
    fn get(&self) -> &[T];

    /// Returns a mutable slice of all component values.
    fn get_mut(&mut self) -> &mut [T];
}

{%- for archetype in ecs.archetypes %}
{% if archetype.description %}
/// {{ archetype.description }}
{%- else %}
/// An archetype grouping entities with identical components.
{%- endif %}
#[derive(Debug, Clone)]
pub struct {{ archetype.name.type }} {
    pub entities: Vec<EntityId>,
    {%- for component_name in archetype.components %}
    pub {{ component_name.fields }}: Vec<{{ component_name.type }}>,
    {%- endfor %}
}

impl {{ archetype.name.type }} {
    #[inline(always)]
    pub fn len(&self) -> usize {
        self.entities.len()
    }

    #[inline(always)]
    pub fn is_empty(&self) -> bool {
        self.entities.is_empty()
    }
}

{% for component_name in archetype.components %}
#[automatically_derived]
impl HasComponent<{{ component_name.type }}> for {{ archetype.name.type }} {
    /// Returns a slice of all [`{{ component_name.type }}`] component values.
    fn get(&self) -> &[{{ component_name.type }}] {
        &self.{{ component_name.fields }}
    }

    /// Returns a mutable slice of all [`{{ component_name.type }}`] component values.
    fn get_mut(&mut self) -> &mut [{{ component_name.type }}] {
        &mut self.{{ component_name.fields }}
    }
}
{% endfor %}

#[automatically_derived]
impl Archetype for {{ archetype.name.type }} {
    const ID: ArchetypeId = ArchetypeId(std::num::NonZeroU64::new({{ archetype.id }}).expect("A zero archetype ID was provided"));

    fn len(&self) -> usize {
        self.entities.len()
    }

    fn is_empty(&self) -> bool {
        self.entities.is_empty()
    }
}

impl PartialEq<ArchetypeId> for {{ archetype.name.type }} {
    fn eq(&self, other: &ArchetypeId) -> bool {
        Self::ID.eq(other)
    }
}

{%- endfor %}
