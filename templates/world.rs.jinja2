/// A world holding all archetypes.
#[derive(Debug, Clone)]
pub struct World {
    {%- for archetype in ecs.archetypes %}
    pub {{ archetype.name.field | snake_case }}: {{ archetype.name.type }},
    {%- endfor %}

    {%- for system in ecs.systems %}
    pub {{ system.name.field }}_system: {{ system.name.type }},
    {%- endfor %}
}

impl World {
    /// Creates a new [`World`].
    pub fn new<S: CreateSystems>(create_systems: &S) -> Self {
        {%- for system in ecs.systems %}
        let {{ system.name.field }}_system = create_systems.create_{{ system.name.field }}();
        {%- endfor %}
        Self {
            {%- for archetype in ecs.archetypes %}
            {{ archetype.name.field | snake_case }}: {{ archetype.name.type }}::default(),
            {%- endfor %}
            {%- for system in ecs.systems %}
            {{ system.name.field }}_system,
            {%- endfor %}
        }
    }

    /// Apply all system phases.
    pub fn apply_system_phases(&mut self) {
        {%- for phase in ecs.phases %}
        self.apply_system_phase_{{ phase.name.field }}();
        {%- endfor %}
    }
    {%- for phase in ecs.phases %}

    /// Execute system phase `{{ phase.name.raw }}`
    pub fn apply_system_phase_{{ phase.name.field }}(&mut self) {
        // TODO: Emit hook for begin of system phase
        {%- if ecs.scheduled_systems[phase.name] | length == 0 %}
        // no systems in this phase
        {%- else %}
        {%- for group in ecs.scheduled_systems[phase.name] %}
        // Execute system group {{ loop.index }}
        {%- for system in group %}
        // Run system {{ system.name.type }}
        {%- for archetype in system.affected_archetypes %}
            // Apply to {{ archetype.type }}
        {%- endfor %}
        {%- endfor %}
        {%- endfor %}
        {%- endif %}
        // TODO: Emit hook for end of system phase
    }
    {%- endfor %}
}
