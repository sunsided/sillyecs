/// The ID of a [`System`].
#[derive(Debug, Copy, Clone, Ord, PartialOrd, Eq, PartialEq)]
pub struct SystemId(core::num::NonZeroU64);

impl SystemId {
    /// Returns this ID as a [`NonZeroU64`](core::num::NonZeroU64) value.
    pub const fn as_nonzero_u64(&self) -> core::num::NonZeroU64 {
        self.0
    }

    /// Returns this ID as a `u64` value.
    pub const fn as_u64(&self) -> u64 {
        self.0.get()
    }
}

impl core::hash::Hash for SystemId {
    fn hash<H: core::hash::Hasher>(&self, state: &mut H) {
        self.0.hash(state);
    }
}

impl From<SystemId> for core::num::NonZeroU64 {
    fn from(value: SystemId) -> core::num::NonZeroU64 {
        value.as_nonzero_u64()
    }
}

impl From<SystemId> for u64 {
    fn from(value: SystemId) -> u64 {
        value.as_u64()
    }
}

/// Marker trait for systems.
pub trait System: 'static + Send + Sync {
    /// The ID of this system.
    const ID: SystemId;
}

/// The system phases.
#[derive(Debug, Copy, Clone, Eq, PartialEq, Ord, PartialOrd, Hash)]
#[allow(dead_code)]
pub enum SystemPhase {
{%- for phase in ecs.phases %}
    {%- if phase.description %}
    /// {{ phase.description }}
    {%- else %}
    /// The `{{ phase.name.raw }}` system phase.
    {%- if phase.fixed %}
    ///
    /// This phase runs using a **fixed-time loop** of approximately {{ phase.fixed_hertz | round }} Hz (i.e., every {{ phase.fixed_secs | round(4) }} seconds) and may iterate zero or multiple times per frame.
    {%- else %}
    ///
    /// This phase is executed exactly once per frame.
    {%- endif %}
    {%- endif %}
    {{ phase.name.raw }} = {{ loop.index - 1 }},
{%- endfor %}
}

#[allow(dead_code)]
impl SystemPhase {
    /// The number of system phases.
    pub const COUNT: usize = {{ ecs.phases | length }};
    {%- for phase in ecs.phases %}
    {%- if phase.fixed %}

    /// The number of seconds the [`{{ phase.name.raw }}`](SystemPhase::{{ phase.name.raw }}) fixed-time step should run.
    pub const {{ phase.name.field | upper }}_SECS: f32 = {{ phase.fixed_secs }};

    /// The frequency of the [`{{ phase.name.raw }}`](SystemPhase::{{ phase.name.raw }}) fixed-time step.
    pub const {{ phase.name.field | upper }}_HZ: f32 = {{ phase.fixed_hertz }};
    {%- endif %}
    {%- endfor %}

    /// Returns the number of seconds between the fixed time steps if this phase
    /// is configured to run in fixed time, otherwise [`None`].
    pub const fn fixed_secs(&self) -> Option<f32> {
        match self {
            {%- for phase in ecs.phases %}
            Self::{{ phase.name.raw }} => {% if phase.fixed -%}
                Some(Self::{{ phase.name.field | upper }}_SECS)
                {%- else -%}
                None
                {%- endif -%},
            {%- endfor %}
        }
    }

    /// Returns frequency this phase should run if this phase
    /// is configured to run in fixed time, otherwise [`None`].
    pub const fn fixed_hz(&self) -> Option<f32> {
        match self {
            {%- for phase in ecs.phases %}
            Self::{{ phase.name.raw }} => {% if phase.fixed -%}
                Some(Self::{{ phase.name.field | upper}}_HZ)
                {%- else -%}
                None
                {%- endif -%},
            {%- endfor %}
        }
    }
}

/// Trait for constructing system instances.
pub trait CreateSystems {
    {%- for system in ecs.systems %}

    /// Create an instance of type [`{{ system.name.type }}`].
    fn create_{{ system.name.field }}(&self) -> {{ system.name.type }};
    {%- endfor %}
}

/// Trait for constructing system instances.
pub trait SystemPhaseEvents: {% for phase in ecs.phases %}{% if loop.index > 1 %} + {% endif %}System{{ phase.name.type }}Events{%- endfor %}
{
}

#[automatically_derived]
impl<T> SystemPhaseEvents for T
where
    T:
{%- for phase in ecs.phases %}
{%- if loop.index > 1 %} +{% endif %} System{{ phase.name.type }}Events
{%- endfor %}
{
}

/// A no-op event struct.
pub struct NoOpPhaseEvents;
{%- for phase in ecs.phases %}

impl System{{ phase.name.type }}Events for NoOpPhaseEvents {
    type Result = ();
    type Error = Infallible;

    #[inline]
    fn on_begin_phase(
        &mut self,
        _context: &FrameContext,
        {%- for state in phase.states %}
        {%- if state.write %}
        _{{ state.use.field }}: &mut {{ state.use.type }},
        {%- else %}
        _{{ state.use.field }}: &{{ state.use.type }},
        {%- endif %}
        {%- endfor %}
    ) -> Result<(), Self::Error> {
        Ok(())
    }

    #[inline]
    fn on_end_phase(
        &mut self,
        _result: Option<Self::Result>,
        _context: &FrameContext,
        {%- for state in phase.states %}
        {%- if state.write %}
        _{{ state.use.field }}: &mut {{ state.use.type }},
        {%- else %}
        _{{ state.use.field }}: &{{ state.use.type }},
        {%- endif %}
        {%- endfor %}
    ) -> Result<(), Self::Error> {
        Ok(())
    }
}

pub trait System{{ phase.name.type }}Events {
    type Result;
    type Error: core::error::Error;

    /// The name of the phase.
    const NAME: &'static str = "{{ phase.name.raw }}";

    /// Executed at the beginning of the phase (before all systems).
    fn on_begin_phase(
        &mut self,
        context: &FrameContext,
        {%- for state in phase.states %}
        {%- if state.write %}
        {{ state.use.field }}: &mut {{ state.use.type }},
        {%- else %}
        {{ state.use.field }}: &{{ state.use.type }},
        {%- endif %}
        {%- endfor %}
    ) -> Result<Self::Result, Self::Error>;

    /// Executed at the end of the phase (after all systems).
    ///
    /// The result from [`System{{ phase.name.type }}Events::on_begin_phase`] is passed in
    /// as [`Some`] value, if the executed succeeded. If the function failed, the value will be [`None`].
    fn on_end_phase(
        &mut self,
        result: Option<Self::Result>,
        context: &FrameContext,
        {%- for state in phase.states %}
        {%- if state.write %}
        {{ state.use.field }}: &mut {{ state.use.type }},
        {%- else %}
        {{ state.use.field }}: &{{ state.use.type }},
        {%- endif %}
        {%- endfor %}
    ) -> Result<(), Self::Error>;
}
{%- endfor %}
{%- for system in ecs.systems %}
{% if system.description %}

/// {{ system.description }}
{%- else %}
/// A system operating on multiple [`Component`]s.
{%- endif %}
///
/// The business logic is implemented via the [`Apply{{ system.name.type }}`] trait.
/// See also [`{{ system.name.raw }}Data`] for the systems-specific data.
///
/// ### Reads
/// {% for input in system.inputs %}
/// - [`{{ input.type }}`]{% endfor %}
///
/// ### Mutates
/// {% for output in system.outputs %}
/// - [`{{ output.type }}`]{% endfor %}
#[derive(Debug)]
pub struct {{ system.name.type }}({{ system.name.type }}Data);

/// Implements the business logic for the [`{{ system.name.type }}`] system.
#[allow(dead_code)]
pub trait Apply{{ system.name.type }}: System {
    type Error;

    /// Indicates whether this system is ready for action.
    ///
    /// Always called once per phase before all other functions of this system. If it returns
    /// `true`, the remaining functions are executed, otherwise the system skips the phase.
    #[inline]
    #[allow(unused_variables)]
    fn is_ready(
        &self,
        {%- if system.needs_context %}
        context: &FrameContext,
        {%- endif %}
        {%- for state in system.states %}
        {%- if state.write %}
        {{ state.use.field }}: &mut {{ state.use.type }},
        {%- else %}
        {{ state.use.field }}: &{{ state.use.type }},
        {%- endif %}
        {%- endfor %}
    ) -> bool {
        true
    }

    /// Executed at the beginning of the phase (for this system).
    ///
    /// All calls to [`apply_many`](Self::apply_many) and/or [`apply_single`](Self::apply_single) happen after this
    /// function was executed.
    #[inline]
    #[allow(unused_variables)]
    fn on_begin_phase(
        &mut self,
        {%- if system.needs_context %}
        context: &FrameContext,
        {%- endif %}
        {%- for state in system.states %}
        {%- if state.write %}
        {{ state.use.field }}: &mut {{ state.use.type }},
        {%- else %}
        {{ state.use.field }}: &{{ state.use.type }},
        {%- endif %}
        {%- endfor %}
    ) -> Result<(), Self::Error> {
        Ok(())
    }

    /// Executed at the end of the phase (for this system).
    ///
    /// All calls to [`apply_many`](Self::apply_many) and/or [`apply_single`](Self::apply_single) happen before this
    /// function is executed.
    #[inline]
    #[allow(unused_variables)]
    fn on_end_phase(
        &mut self,
        {%- if system.needs_context %}
        context: &FrameContext,
        {%- endif %}
        {%- for state in system.states %}
        {%- if state.write %}
        {{ state.use.field }}: &mut {{ state.use.type }},
        {%- else %}
        {{ state.use.field }}: &{{ state.use.type }},
        {%- endif %}
        {%- endfor %}
    ) -> Result<(), Self::Error> {
        Ok(())
    }

    /// Applies the system's business logic to the given entity components.
    ///
    /// ### Performance Considerations
    /// Prefer implementing [`apply_many`](Self::apply_many) directly.
    ///
    /// ### Reads
    /// {% for input in system.inputs %}
    /// - `{{ input.field }}`: A reference to the input component of type [`{{ input.type }}`].{% endfor %}
    ///
    /// ### Mutates
    /// {% for output in system.outputs %}
    /// - `{{ output.field }}`: A mutable reference to the component of type [`{{ output.type }}`].{% endfor %}
    fn apply_single(
        &mut self,
        {%- if system.needs_context %}
        context: &FrameContext,
        {%- endif %}
        {%- for state in system.states %}
        {%- if state.write %}
        {{ state.use.field }}: &mut {{ state.use.type }},
        {%- else %}
        {{ state.use.field }}: &{{ state.use.type }},
        {%- endif %}
        {%- endfor %}
        {%- if system.needs_entities %}
        entity: EntityId,
        {%- endif %}
        {%- for input in system.inputs %}
        {{ input.field }}: &{{ input.type }},
        {%- endfor %}
        {%- for output in system.outputs %}
        {{ output.field }}: &mut {{ output.type }},
        {%- endfor %}
        {%- if system.emits_commands %}
        commands: &impl WorldCommandSender
        {%- endif %}
    );

    /// Applies the system's business logic to the given entity components.
    ///
    /// ### Reads
    /// {% for input in system.inputs %}
    /// - `{{ input.field }}`: A slice of the input components of type [`{{ input.type }}`].{% endfor %}
    ///
    /// ### Mutates
    /// {% for output in system.outputs %}
    /// - `{{ output.field }}`: A mutable slice of the components of type [`{{ output.type }}`].{% endfor %}
    fn apply_many(
        &mut self,
        {%- if system.needs_context %}
        context: &FrameContext,
        {%- endif %}
        {%- for state in system.states %}
        {%- if state.write %}
        {{ state.use.field }}: &mut {{ state.use.type }},
        {%- else %}
        {{ state.use.field }}: &{{ state.use.type }},
        {%- endif %}
        {%- endfor %}
        {%- if system.needs_entities %}
        entities: &[EntityId],
        {%- endif %}
        {%- for input in system.inputs %}
        {{ input.fields }}: &[{{ input.type }}],
        {%- endfor %}
        {%- for output in system.outputs %}
        {{ output.fields }}: &mut [{{ output.type }}],
        {%- endfor %}
        {%- if system.emits_commands %}
        commands: &impl WorldCommandSender
        {%- endif %}
    ) {
        {%- set input_count = system.inputs | length %}
        {%- set output_count = system.outputs | length %}
        {%- set entity_count = 1 if system.needs_entities else 0 %}
        {%- set total_count = input_count + output_count + entity_count %}
        {%- if total_count > 1 %}
        {%- if input_count == 1 %}
        {%- set used_inputs = true %}
        let count = {{ system.inputs[0].fields }}.len();
        {%- elif output_count == 1 %}
        {%- set used_outputs = true %}
        let count = {{ system.outputs[0].fields }}.len();
        {%- endif %}
        {%- if input_count > 1 and not used_inputs %}
        {%- for input in system.inputs %}
        debug_assert_eq!({{ input.fields }}.len(), count);
        {%- endfor %}
        {%- endif %}
        {%- if output_count > 1 and not used_outputs %}
        {%- for output in system.outputs %}
        debug_assert_eq!({{ output.fields }}.len(), count);
        {%- endfor %}
        {%- endif %}
        {%- if system.needs_entities %}
        debug_assert_eq!(entities.len(), count);
        {%- endif %}
        {%- endif %}
        let zipped_iter = {{ system.component_iter_code }};
        for {{ system.component_untuple_code }} in zipped_iter {
            self.apply_single(
                {%- if system.needs_context %}
                &context,
                {%- endif %}
                {%- for state in system.states %}
                {{ state.use.field }},
                {%- endfor %}
                {%- if system.needs_entities %}
                *entity,
                {%- endif %}
                {%- for input in system.inputs %}
                {{ input.field }},
                {%- endfor %}
                {%- for output in system.outputs %}
                {{ output.field }},
                {%- endfor %}
                {%- if system.emits_commands %}
                commands
                {%- endif %}
            );
        }
    }
}

#[allow(dead_code)]
impl {{ system.name.type }} {
    /// Apply the system to the given entity components
    #[inline]
    pub fn apply_single(
        &mut self,
        {%- if system.needs_context %}
        context: &FrameContext,
        {%- endif %}
        {%- for state in system.states %}
        {%- if state.write %}
        {{ state.use.field }}: &mut {{ state.use.type }},
        {%- else %}
        {{ state.use.field }}: &{{ state.use.type }},
        {%- endif %}
        {%- endfor %}
        {%- if system.needs_entities %}
        entity: EntityId,
        {%- endif %}
        {%- for input in system.inputs %}
        {{ input.field }}: &{{ input.type }},
        {%- endfor %}
        {%- for output in system.outputs %}
        {{ output.field }}: &mut {{ output.type }},
        {%- endfor %}
        {%- if system.emits_commands %}
        commands: &impl WorldCommandSender
        {%- endif %}
    ) {
        Apply{{ system.name.type }}::apply_single(
            self,
            {%- if system.needs_context %}
            context,
            {%- endif %}
            {%- for state in system.states %}
            {{ state.use.field }},
            {%- endfor %}
            {%- if system.needs_entities %}
            entity,
            {%- endif %}
            {%- for input in system.inputs %}
            {{ input.field }},
            {%- endfor %}
            {%- for output in system.outputs %}
            {{ output.field }},
            {%- endfor %}
            {%- if system.emits_commands %}
            commands
            {%- endif %}
        );
    }

    /// Applies the system's business logic to the given entity components.
    ///
    /// ### Reads
    /// {% for input in system.inputs %}
    /// - `{{ input.field }}`: A slice of the input components of type [`{{ input.type }}`].{% endfor %}
    ///
    /// ### Mutates
    /// {% for output in system.outputs %}
    /// - `{{ output.field }}`: A mutable slice of the components of type [`{{ output.type }}`].{% endfor %}
    #[inline]
    fn apply_many(
        &mut self,
        {%- if system.needs_context %}
        context: &FrameContext,
        {%- endif %}
        {%- for state in system.states %}
        {%- if state.write %}
        {{ state.use.field }}: &mut {{ state.use.type }},
        {%- else %}
        {{ state.use.field }}: &{{ state.use.type }},
        {%- endif %}
        {%- endfor %}
        {%- if system.needs_entities %}
        entities: &[EntityId],
        {%- endif %}
        {%- for input in system.inputs %}
        {{ input.fields }}: &[{{ input.type }}],
        {%- endfor %}
        {%- for output in system.outputs %}
        {{ output.fields }}: &mut [{{ output.type }}],
        {%- endfor %}
        {%- if system.emits_commands %}
        commands: &impl WorldCommandSender
        {%- endif %}
    ) {
        Apply{{ system.name.type }}::apply_many(
            self,
            {%- if system.needs_context %}
            context,
            {%- endif %}
            {%- for state in system.states %}
            {{ state.use.field }},
            {%- endfor %}
            {%- if system.needs_entities %}
            entities,
            {%- endif %}
            {%- for input in system.inputs %}
            {{ input.fields }},
            {%- endfor %}
            {%- for output in system.outputs %}
            {{ output.fields }},
            {%- endfor %}
            {%- if system.emits_commands %}
            commands
            {%- endif %}
        );
    }

    {%- for archetype in system.affected_archetypes %}

    /// Applies this system to the [`{{ archetype.type }}`].
    #[inline]
    #[deprecated]
    fn apply_to_{{ archetype.field }}(
        &mut self,
        archetype: &mut {{ archetype.type }},
        {%- if system.needs_context %}
        context: &FrameContext,
        {%- endif %}
        {%- for state in system.states %}
        {%- if state.write %}
        {{ state.use.field }}: &mut {{ state.use.type }},
        {%- else %}
        {{ state.use.field }}: &{{ state.use.type }},
        {%- endif %}
        {%- endfor %}
        {%- if system.emits_commands %}
        commands: &impl WorldCommandSender
        {%- endif %}
    ) {
        self.apply_many(
            {%- if system.needs_context %}
            &context,
            {%- endif %}
            {%- for state in system.states %}
            {{ state.use.field }},
            {%- endfor %}
            {%- if system.needs_entities %}
            &archetype.entities,
            {%- endif %}
            {%- for input in system.inputs %}
            &archetype.{{ input.fields }},
            {%- endfor %}
            {%- for output in system.outputs %}
            &mut archetype.{{ output.fields }},
            {%- endfor %}
            {%- if system.emits_commands %}
            commands
            {%- endif %}
        );
    }
    {%- endfor %}
}

#[automatically_derived]
impl System for {{ system.name.type }} {
    const ID: SystemId = SystemId(core::num::NonZeroU64::new({{ system.id }}).expect("A zero system ID was provided"));
}

impl PartialEq<SystemId> for {{ system.name.type }} {
    fn eq(&self, other: &SystemId) -> bool {
        Self::ID.eq(other)
    }
}

#[automatically_derived]
impl From<{{ system.name.type }}Data> for {{ system.name.type }} {
    fn from(data: {{ system.name.type }}Data) -> Self {
        Self(data)
    }
}

#[automatically_derived]
impl core::ops::Deref for {{ system.name.type }} {
    type Target = {{ system.name.type }}Data;

    fn deref(&self) -> &Self::Target {
        &self.0
    }
}

#[automatically_derived]
impl core::ops::DerefMut for {{ system.name.type }} {
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.0
    }
}

{%- endfor %}
