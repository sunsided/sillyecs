/// The ID of a [`System`].
#[derive(Debug, Copy, Clone, Ord, PartialOrd, Eq, PartialEq, Hash)]
pub struct SystemId(std::num::NonZeroU64);

/// Marker trait for systems.
pub trait System: 'static + Send + Sync {
    /// The ID of this system.
    const ID: SystemId;
}

{%- for system in ecs.systems %}
{% if system.description %}
/// {{ system.description }}
{%- else %}
/// A system operating on multiple [`Component`]s.
{%- endif %}
#[derive(Debug, Clone)]
pub struct {{ system.name.type }}({{ system.name.type }}Data);

pub trait Apply{{ system.name.type }}: System {
    /// Apply the system to the given entity components
    fn apply(&self, velocity: &VelocityComponent, position: &mut PositionComponent);
}

impl {{ system.name.type }} {
    /// Apply the system to the given entity components
    #[inline]
    pub fn apply(&self, velocity: &VelocityComponent, position: &mut PositionComponent) {
        Apply{{ system.name.type }}::apply(self, velocity, position);
    }
}

#[automatically_derived]
impl System for {{ system.name.type }} {
    const ID: SystemId = SystemId(std::num::NonZeroU64::new({{ system.id }}).expect("A zero system ID was provided"));
}

impl PartialEq<SystemId> for {{ system.name.type }} {
    fn eq(&self, other: &SystemId) -> bool {
        Self::ID.eq(other)
    }
}

#[automatically_derived]
impl From<{{ system.name.type }}Data> for {{ system.name.type }} {
    fn from(data: {{ system.name.type }}Data) -> Self {
        Self(data)
    }
}

#[automatically_derived]
impl std::ops::Deref for {{ system.name.type }} {
    type Target = {{ system.name.type }}Data;

    fn deref(&self) -> &Self::Target {
        &self.0
    }
}

#[automatically_derived]
impl std::ops::DerefMut for {{ system.name.type }} {
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.0
    }
}

{%- endfor %}
