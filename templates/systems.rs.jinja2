/// The ID of a [`System`].
#[derive(Debug, Copy, Clone, Ord, PartialOrd, Eq, PartialEq, Hash)]
pub struct SystemId(std::num::NonZeroU64);

impl SystemId {
    /// Returns this ID as a [`NonZeroU64`](std::num::NonZeroU64) value.
    pub const fn as_nonzero_u64(&self) -> std::num::NonZeroU64 {
        self.0
    }

    /// Returns this ID as a `u64` value.
    pub const fn as_u64(&self) -> u64 {
            self.0.get()
    }
}

impl From<SystemId> for std::num::NonZeroU64 {
    fn from(value: SystemId) -> std::num::NonZeroU64 {
        value.as_nonzero_u64()
    }
}

impl From<SystemId> for u64 {
    fn from(value: SystemId) -> u64 {
        value.as_u64()
    }
}

/// Marker trait for systems.
pub trait System: 'static + Send + Sync {
    /// The ID of this system.
    const ID: SystemId;
}

{%- for system in ecs.systems %}
{% if system.description %}
/// {{ system.description }}
{%- else %}
/// A system operating on multiple [`Component`]s.
{%- endif %}
///
/// The business logic is implemented via the [`Apply{{ system.name.type }}`] trait.
/// See also [`{{ system.name.raw }}Data`] for the systems-specific data.
///
/// ### Reads
/// {% for input in system.inputs %}
/// - [`{{ input.type }}`]{% endfor %}
///
/// ### Mutates
/// {% for output in system.outputs %}
/// - [`{{ output.type }}`]{% endfor %}
#[derive(Debug, Clone)]
pub struct {{ system.name.type }}({{ system.name.type }}Data);

/// Implements the business logic for the [`{{ system.name.type }}`] system.
pub trait Apply{{ system.name.type }}: System {
    /// Applies the system's business logic to the given entity components.
    ///
    /// ### Reads
    /// {% for input in system.inputs %}
    /// - `{{ input.field }}`: A reference to the input component of type [`{{ input.type }}`].{% endfor %}
    ///
    /// ### Mutates
    /// {% for output in system.outputs %}
    /// - `{{ output.field }}`: A mutable reference to the component of type [`{{ output.type }}`].{% endfor %}
    fn apply(
        &self,
        {%- for input in system.inputs %}
        {{ input.field }}: &{{ input.type }},
        {%- endfor %}
        {%- for output in system.outputs %}
        {{ output.field }}: &mut {{ output.type }},
        {%- endfor %}
    );
}

impl {{ system.name.type }} {
    /// Apply the system to the given entity components
    #[inline]
    pub fn apply(&self, velocity: &VelocityComponent, position: &mut PositionComponent) {
        Apply{{ system.name.type }}::apply(self, velocity, position);
    }

    {%- for archetype in system.affected_archetypes %}

    /// Applies this system to the [`{{ archetype.type }}`].
    pub fn apply_to_{{ archetype.field }}(&self, archetype: &mut {{ archetype.type }}) {
        for i in 0..archetype.len() {
            self.apply(
                {%- for input in system.inputs %}
                &archetype.{{ input.fields }}[i],
                {%- endfor %}
                {%- for output in system.outputs %}
                &mut archetype.{{ output.fields }}[i],
                {%- endfor %}
            );
        }
    }
    {%- endfor %}
}

#[automatically_derived]
impl System for {{ system.name.type }} {
    const ID: SystemId = SystemId(std::num::NonZeroU64::new({{ system.id }}).expect("A zero system ID was provided"));
}

impl PartialEq<SystemId> for {{ system.name.type }} {
    fn eq(&self, other: &SystemId) -> bool {
        Self::ID.eq(other)
    }
}

#[automatically_derived]
impl From<{{ system.name.type }}Data> for {{ system.name.type }} {
    fn from(data: {{ system.name.type }}Data) -> Self {
        Self(data)
    }
}

#[automatically_derived]
impl std::ops::Deref for {{ system.name.type }} {
    type Target = {{ system.name.type }}Data;

    fn deref(&self) -> &Self::Target {
        &self.0
    }
}

#[automatically_derived]
impl std::ops::DerefMut for {{ system.name.type }} {
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.0
    }
}

{%- endfor %}
